pipeline {
    agent none
    stages {
        stage('Get Code'){
            agent {
                label 'linux'
            }
            steps {
                echo 'Trayendo codigo del repo'
                git branch: 'master', url: 'https://github.com/jruru80/jruru-devops-helloworld.git'
                sh 'ls -la'
                echo 'Workspace'
                echo WORKSPACE 
                sh 'whoami'
                sh 'hostname'
                stash includes: 'app/**/*', name:'app'
                stash includes: 'test/**/*', name: 'test'
            }
        }
        stage('Tests'){
            parallel {
                stage('Unit'){
                    agent {
                        label 'linux && python && java'
                    }
                    steps {
                        unstash 'app'
                        unstash 'test'
                        sh '''
                            export PYTHONPATH=${WORKSPACE}
                            pytest --junitxml=result-unit.xml test/unit
                        '''
                        stash includes:'result-unit.xml', name:'test-unit-result'
                        echo 'Workspace'
                        echo WORKSPACE 
                        sh 'whoami'
                        sh 'hostname'
                    }
                }
                stage('Rest'){
                    agent {
                        label 'linux && python && java'
                    }
                    steps {
                        catchError(buildResult : 'UNSTABLE', stageResult: 'FAILURE'){
                            unstash 'app'
                            unstash 'test'
                            sh '''
                                export PYTHONPATH=${WORKSPACE}
                                export FLASK_APP=app/api.py
                                export FLASK_ENV=development
                                flask run > flask_started.txt &
                                export TEST_PATH=${WORKSPACE}/test/wiremock
                                java -jar /Users/jesusrubia/devops-cloud/wiremock/wiremock-standalone-3.13.0.jar \
                                    --port 9090 --root-dir=${TEST_PATH} > wr_started.txt & 
                            '''
                            echo ('esperamos a que se hayan levantado los servidores para ejecutar los test rest')
                            timeout(time: 30, unit: 'SECONDS'){
                                waitUntil {
                                    fileExists('flask_started.txt')
                                    fileExists('wr_started.txt')
                                }
                            }
                            echo ('servidores levantados, se ejecutan los test rest')
                            sh 'export PYTHONPATH=${WORKSPACE}'
                            sh 'pytest --junitxml=result-rest.xml test/rest'
                            junit 'result*.xml'
                            echo 'Workspace'
                            echo WORKSPACE 
                            sh 'whoami'
                            sh 'hostname'
                        }
                    }
                }
                stage('Coverage'){
                    agent {
                        label 'linux && python'
                    }
                    steps {
                        catchError(stageResult: 'UNSTABLE'){
                                unstash 'app'
                                unstash 'test'
                                sh '''
                                    export PYTHONPATH=${WORKSPACE}
                                    coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                                    coverage xml
                                '''
                                cobertura coberturaReportFile : 'coverage.xml', onlyStable : false,\
                                conditionalCoverageTargets : '90,80,90', lineCoverageTargets : '95,85,95'
                                echo 'Workspace'
                                echo WORKSPACE 
                                sh 'whoami'
                                sh 'hostname'
                        }
                    }
                }
                stage('Static'){
                    agent {
                        label 'linux && python'
                    }
                    steps {
                        catchError(stageResult: 'UNSTABLE'){
                            unstash 'app'
                            unstash 'test'
                            sh '''
                                export PYTHONPATH=${WORKSPACE}
                                python3 -m flake8 --format=pylint --exit-zero app > flake8.out
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], \
                            qualityGates : [[threshold:8, type: 'TOTAL', unstable: true], \
                            [threshold: 10, type: 'TOTAL', unstable: false]]
                            echo 'Workspace'
                            echo WORKSPACE 
                            sh 'whoami'
                            sh 'hostname'
                        }
                    }
                }
                stage('Security'){
                    agent {
                        label 'linux && python'
                    }
                    steps {
                        catchError(stageResult: 'UNSTABLE'){
                            unstash 'app'
                            unstash 'test'
                            sh '''
                                bandit --exit-zero -r . -f custom -o bandit.out \
                                --msg-template "{relpath}:{line}: [{test_id}] {msg}"
                            '''
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], \
                            qualityGates : [[threshold:2, type: 'TOTAL', unstable: true], \
                            [threshold: 4, type: 'TOTAL', unstable: false]]
                            echo 'Workspace'
                            echo WORKSPACE 
                            sh 'whoami'
                            sh 'hostname'
                        }
                    }
                }
            }
        }
        
        stage ('Performance'){
            agent {
                label 'linux && python'
            }
            steps {
                catchError(stageResult: 'UNSTABLE'){
                    unstash 'app'
                    unstash 'test'
                    echo ('levantamos flask en esta etapa')
                    sh '''
                        export PYTHONPATH=${WORKSPACE}
                        export FLASK_APP=app/api.py
                        export FLASK_ENV=development
                        flask run > flask_started_for_performance.txt &
                    '''
                    
                    timeout(time: 30, unit: 'SECONDS'){
                        waitUntil {
                            fileExists('flask_started_for_performance.txt')
                        }
                    }
                    sh '''
                        /Users/jesusrubia/devops-cloud/apache-jmeter-5.6.3/bin/jmeter.sh \
                        -n -t test/jmeter/flask.jmx -f -l flask.jtl
                    '''
                    echo ('todo listo se ejecuta el report de los test de rendimiento')
                    perfReport sourceDataFiles : 'flask.jtl'
                    echo 'Workspace'
                    echo WORKSPACE 
                    sh 'whoami'
                    sh 'hostname'
                }
            }
        }
        stage("clean workspace") {
            agent {
                label 'linux && python'
            }
            steps {
                echo ('borramos workspace, antes del borrado')
                sh "ls"
                cleanWs()
                echo ('despues del borrado workspace')
                sh "ls"
                echo 'Workspace'
                echo WORKSPACE 
                sh 'whoami'
                sh 'hostname'
            }
         }  
    }
}